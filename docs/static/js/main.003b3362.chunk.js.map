{"version":3,"sources":["containers/Home/index.js","containers/Front_end/index.js","containers/Back_end/index.js","containers/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","frontend","type","onClick","props","history","push","backend","SubMenu","Menu","Header","Layout","Content","Sider","Footer","AppRouter","state","className","theme","mode","defaultSelectedKeys","Item","key","to","breakpoint","collapsedWidth","width","defaultOpenKeys","style","height","borderRight","icon","UserOutlined","title","LaptopOutlined","NotificationOutlined","padding","margin","minHeight","path","component","exact","Frontend","Backend","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.003b3362.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class Home extends Component {\r\n  render() {\r\n    return <h1>首页</h1>;\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\nexport class frontend extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>前端</div>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            this.props.history.push(\"/backend\");\r\n          }}\r\n        >\r\n          Go backend\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default frontend;\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\nexport class backend extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>后端</div>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            this.props.history.push(\"/frontend\");\r\n          }}\r\n        >\r\n          go\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default backend;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  HashRouter,\r\n  Route,\r\n  NavLink,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Home from \"../Home\";\r\nimport Frontend from \"../Front_end\";\r\nimport Backend from \"../Back_end\";\r\n\r\nimport { Layout, Menu, Breadcrumb } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  LaptopOutlined,\r\n  NotificationOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nclass AppRouter extends React.Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        <Layout>\r\n          <Header className=\"header\">\r\n            <div className=\"logo\" />\r\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"2\"]}>\r\n              <Menu.Item key=\"1\">\r\n                <NavLink to=\"/\">首页</NavLink>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"2\">\r\n                <NavLink to=\"/frontend\">前端</NavLink>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"3\">\r\n                <NavLink to=\"backend\">后端</NavLink>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Header>\r\n          <Layout>\r\n            <Sider\r\n              breakpoint=\"lg\"\r\n              collapsedWidth=\"0\"\r\n              width={200}\r\n              className=\"site-layout-background\"\r\n            >\r\n              <Menu\r\n                mode=\"inline\"\r\n                defaultSelectedKeys={[\"1\"]}\r\n                defaultOpenKeys={[\"sub1\"]}\r\n                style={{ height: \"100%\", borderRight: 0 }}\r\n              >\r\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"subnav 1\">\r\n                  <Menu.Item key=\"1\">option1</Menu.Item>\r\n                  <Menu.Item key=\"2\">option2</Menu.Item>\r\n                  <Menu.Item key=\"3\">option3</Menu.Item>\r\n                  <Menu.Item key=\"4\">option4</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"subnav 2\">\r\n                  <Menu.Item key=\"5\">option5</Menu.Item>\r\n                  <Menu.Item key=\"6\">option6</Menu.Item>\r\n                  <Menu.Item key=\"7\">option7</Menu.Item>\r\n                  <Menu.Item key=\"8\">option8</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu\r\n                  key=\"sub3\"\r\n                  icon={<NotificationOutlined />}\r\n                  title=\"subnav 3\"\r\n                >\r\n                  <Menu.Item key=\"9\">option9</Menu.Item>\r\n                  <Menu.Item key=\"10\">option10</Menu.Item>\r\n                  <Menu.Item key=\"11\">option11</Menu.Item>\r\n                  <Menu.Item key=\"12\">option12</Menu.Item>\r\n                </SubMenu>\r\n              </Menu>\r\n            </Sider>\r\n            <Layout style={{ padding: \"0 24px 24px\" }}>\r\n              <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                <Breadcrumb.Item>App</Breadcrumb.Item>\r\n              </Breadcrumb>\r\n              <Content\r\n                className=\"site-layout-background\"\r\n                style={{\r\n                  padding: 24,\r\n                  margin: 0,\r\n                  minHeight: 280,\r\n                }}\r\n              >\r\n                <Route path=\"/\" component={Home} exact />\r\n                <Route path=\"/frontend\" component={Frontend} exact />\r\n                <Route path=\"/backend\" component={Backend} exact />\r\n                <Redirect to=\"/\" />\r\n              </Content>\r\n            </Layout>\r\n          </Layout>\r\n        </Layout>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppRouter;\r\n","import React from \"react\";\nimport Router from \"./containers/Main\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\nfunction App() {\n  return <Router />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
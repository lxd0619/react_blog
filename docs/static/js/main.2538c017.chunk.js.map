{"version":3,"sources":["containers/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["SubMenu","Menu","Main","state","mode","theme","collapsed","changeMode","value","setState","changeTheme","toggleCollapsed","onChange","this","type","onClick","style","marginBottom","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","defaultSelectedKeys","defaultOpenKeys","inlineCollapsed","Item","key","icon","MailOutlined","CalendarOutlined","AppstoreOutlined","title","SettingOutlined","LinkOutlined","href","target","rel","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QA2BQA,EAAYC,IAAZD,QA8FOE,E,4MA3FbC,MAAQ,CACNC,KAAM,SACNC,MAAO,QACPC,WAAW,G,EAGbC,WAAa,SAACC,GACZ,EAAKC,SAAS,CACZL,KAAMI,EAAQ,WAAa,Y,EAI/BE,YAAc,SAACF,GACb,EAAKC,SAAS,CACZJ,MAAOG,EAAQ,OAAS,W,EAI5BG,gBAAkB,WAChB,EAAKF,SAAS,CACZH,WAAY,EAAKH,MAAMG,a,uDAKzB,OACE,oCACE,kBAAC,IAAD,CAAQM,SAAUC,KAAKN,aADzB,eAEE,kBAAC,IAAD,CAASO,KAAK,aACd,kBAAC,IAAD,CAAQF,SAAUC,KAAKH,cAHzB,gBAIE,kBAAC,IAAD,CACEI,KAAK,UACLC,QAASF,KAAKF,gBACdK,MAAO,CAAEC,aAAc,KAEtBC,IAAMC,cACLN,KAAKV,MAAMG,UAAYc,IAAqBC,MAGhD,6BACA,6BACA,kBAAC,IAAD,CACEC,oBAAqB,CAAC,KACtBC,gBAAiB,CAAC,QAClBnB,KAAMS,KAAKV,MAAMC,KACjBC,MAAOQ,KAAKV,MAAME,MAClBmB,gBAAiBX,KAAKV,MAAMG,WAE5B,kBAAC,IAAKmB,KAAN,CAAWC,IAAI,IAAIC,KAAM,kBAACC,EAAA,EAAD,OAAzB,kBAGA,kBAAC,IAAKH,KAAN,CAAWC,IAAI,IAAIC,KAAM,kBAACE,EAAA,EAAD,OAAzB,kBAGA,kBAAC7B,EAAD,CACE0B,IAAI,OACJC,KAAM,kBAACG,EAAA,EAAD,MACNC,MAAM,kBAEN,kBAAC,IAAKN,KAAN,CAAWC,IAAI,KAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,YACA,kBAAC1B,EAAD,CAAS0B,IAAI,SAASK,MAAM,WAC1B,kBAAC,IAAKN,KAAN,CAAWC,IAAI,KAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,cAGJ,kBAAC1B,EAAD,CACE0B,IAAI,OACJC,KAAM,kBAACK,EAAA,EAAD,MACND,MAAM,oBAEN,kBAAC,IAAKN,KAAN,CAAWC,IAAI,KAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,MAAf,cAEF,kBAAC,IAAKD,KAAN,CAAWC,IAAI,OAAOC,KAAM,kBAACM,EAAA,EAAD,OAC1B,uBACEC,KAAK,qBACLC,OAAO,SACPC,IAAI,uBAHN,qB,GA9EOlB,IAAMmB,W,OCjBVC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2538c017.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n// import Front_end from \"../Front_end\";\r\n// import Back_end from \"../Back_end\";\r\n// const MainRouter = () => (\r\n//     <HashRouter>\r\n//       <Switch>\r\n//         <Route path=\"/frontend\" component={Front_end} />\r\n//         <Route path=\"/backend\" component={Back_end} />\r\n//         <Redirect to=\"/frontend\" />\r\n//       </Switch>\r\n//     </HashRouter>\r\n//   );\r\n\r\n//   export default MainRouter;\r\n\r\nimport { Menu, Switch, Divider, Button } from \"antd\";\r\nimport {\r\n  MailOutlined,\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n  CalendarOutlined,\r\n  AppstoreOutlined,\r\n  SettingOutlined,\r\n  LinkOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nclass Main extends React.Component {\r\n  state = {\r\n    mode: \"inline\",\r\n    theme: \"light\",\r\n    collapsed: false,\r\n  };\r\n\r\n  changeMode = (value) => {\r\n    this.setState({\r\n      mode: value ? \"vertical\" : \"inline\",\r\n    });\r\n  };\r\n\r\n  changeTheme = (value) => {\r\n    this.setState({\r\n      theme: value ? \"dark\" : \"light\",\r\n    });\r\n  };\r\n\r\n  toggleCollapsed = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Switch onChange={this.changeMode} /> Change Mode\r\n        <Divider type=\"vertical\" />\r\n        <Switch onChange={this.changeTheme} /> Change Style\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={this.toggleCollapsed}\r\n          style={{ marginBottom: 16 }}\r\n        >\r\n          {React.createElement(\r\n            this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined\r\n          )}\r\n        </Button>\r\n        <br />\r\n        <br />\r\n        <Menu\r\n          defaultSelectedKeys={[\"1\"]}\r\n          defaultOpenKeys={[\"sub1\"]}\r\n          mode={this.state.mode}\r\n          theme={this.state.theme}\r\n          inlineCollapsed={this.state.collapsed}\r\n        >\r\n          <Menu.Item key=\"1\" icon={<MailOutlined />}>\r\n            Navigation One\r\n          </Menu.Item>\r\n          <Menu.Item key=\"2\" icon={<CalendarOutlined />}>\r\n            Navigation Two\r\n          </Menu.Item>\r\n          <SubMenu\r\n            key=\"sub1\"\r\n            icon={<AppstoreOutlined />}\r\n            title=\"Navigation Two\"\r\n          >\r\n            <Menu.Item key=\"3\">Option 3</Menu.Item>\r\n            <Menu.Item key=\"4\">Option 4</Menu.Item>\r\n            <SubMenu key=\"sub1-2\" title=\"Submenu\">\r\n              <Menu.Item key=\"5\">Option 5</Menu.Item>\r\n              <Menu.Item key=\"6\">Option 6</Menu.Item>\r\n            </SubMenu>\r\n          </SubMenu>\r\n          <SubMenu\r\n            key=\"sub2\"\r\n            icon={<SettingOutlined />}\r\n            title=\"Navigation Three\"\r\n          >\r\n            <Menu.Item key=\"7\">Option 7</Menu.Item>\r\n            <Menu.Item key=\"8\">Option 8</Menu.Item>\r\n            <Menu.Item key=\"9\">Option 9</Menu.Item>\r\n            <Menu.Item key=\"10\">Option 10</Menu.Item>\r\n          </SubMenu>\r\n          <Menu.Item key=\"link\" icon={<LinkOutlined />}>\r\n            <a\r\n              href=\"https://ant.design\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Ant Design\r\n            </a>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport Router from \"./containers/Main\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
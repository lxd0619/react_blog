{"version":3,"sources":["logo.svg","serviceWorker.js","containers/Front_end/index.js","containers/Back_end/index.js","containers/Main/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","frontend","type","onClick","props","history","push","Component","backend","MainRouter","path","component","Front_end","Back_end","to","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,sLCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCGSC,EAlBf,uKACY,IAAD,OACP,OACE,oCACE,6CACA,kBAAC,IAAD,CACEC,KAAK,UACLC,QAAS,WACP,EAAKC,MAAMC,QAAQC,KAAK,cAH5B,mBALR,GAA8BC,aCkBfC,EAlBf,uKACY,IAAD,OACP,OACE,oCACE,6CACA,kBAAC,IAAD,CACEN,KAAK,UACLC,QAAS,WACP,EAAKC,MAAMC,QAAQC,KAAK,eAH5B,WALR,GAA6BC,aCoBdE,EAVI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAWC,IACnC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWE,IAClC,kBAAC,IAAD,CAAUC,GAAG,iB,MCVnBC,IAASC,OACP,kBAAC,EAAD,MAIAC,SAASC,eAAe,SJsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65f9300a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\nexport class frontend extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>前端</div>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            this.props.history.push(\"/backend\");\r\n          }}\r\n        >\r\n          Go backend\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default frontend;\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\nexport class backend extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>后端</div>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            this.props.history.push(\"/frontend\");\r\n          }}\r\n        >\r\n          go\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default backend;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  HashRouter,\r\n  Route,\r\n  NavLink,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport Front_end from \"../Front_end\";\r\nimport Back_end from \"../Back_end\";\r\n\r\nconst MainRouter = () => (\r\n  <HashRouter>\r\n    <Switch>\r\n      <Route path=\"/frontend\" component={Front_end} />\r\n      <Route path=\"/backend\" component={Back_end} />\r\n      <Redirect to=\"/frontend\" />\r\n    </Switch>\r\n  </HashRouter>\r\n);\r\n\r\nexport default MainRouter;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Router from \"./containers/Main\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\nReactDOM.render(\n  <Router />,\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}